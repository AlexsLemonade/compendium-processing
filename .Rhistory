# magrittr pipe
`%>%` <- dplyr::`%>%`
# microarray data is "missing" a column name, we need to fill it in
read_in_microarray_data <- function(filename) {
# read in a given file and set the first column name to "Gene"
# we're suppressing warnings here because we know the missing column is
# a problem -- that's why we have this function!
df <- suppressWarnings(data.table::fread(filename, data.table = FALSE))
colnames(df)[1] <- "Gene"
return(df)
}
# full path to all the microarray data we obtain
microarray_files <- list.files(file.path("data", "microarray"),
full.names = TRUE)
# initialize a list to hold the data.frames
df_list <- list()
for (file_iter in seq_along(microarray_files)) {
df_list[[file_iter]] <- read_in_microarray_data(microarray_files[file_iter])
}
dir.create(file.path("data", "aggregated"), recursive = TRUE)
microarray_df <- plyr::join_all(df_list, by = "Gene", type = "inner") %>%
dplyr::mutate(Gene = sub("_at", "", Gene))
dir.create(file.path("data", "aggregated"), recursive = TRUE)
microarray_df <- plyr::join_all(df_list, by = "Gene", type = "inner") %>%
dplyr::mutate(Gene = sub("_at", "", Gene))
# full path to all the microarray data we obtain
microarray_files <- list.files(file.path("data", "microarray"),
full.names = TRUE)
# initialize a list to hold the data.frames
df_list <- list()
for (file_iter in seq_along(microarray_files)) {
df_list[[file_iter]] <- read_in_microarray_data(microarray_files[file_iter])
}
dir.create(file.path("data", "aggregated"), recursive = TRUE)
microarray_df <- plyr::join_all(df_list, by = "Gene", type = "inner") %>%
dplyr::mutate(Gene = sub("_at", "", Gene))
# magrittr pipe
`%>%` <- dplyr::`%>%`
# microarray data is "missing" a column name, we need to fill it in
read_in_microarray_data <- function(filename) {
# read in a given file and set the first column name to "Gene"
# we're suppressing warnings here because we know the missing column is
# a problem -- that's why we have this function!
df <- suppressWarnings(data.table::fread(filename, data.table = FALSE))
colnames(df)[1] <- "Gene"
return(df)
}
# magrittr pipe
`%>%` <- dplyr::`%>%`
# microarray data is "missing" a column name, we need to fill it in
read_in_microarray_data <- function(filename) {
# read in a given file and set the first column name to "Gene"
# we're suppressing warnings here because we know the missing column is
# a problem -- that's why we have this function!
df <- suppressWarnings(data.table::fread(filename, data.table = FALSE))
colnames(df)[1] <- "Gene"
return(df)
}
# full path to all the microarray data we obtain
microarray_files <- list.files(file.path("data", "microarray"),
full.names = TRUE)
# initialize a list to hold the data.frames
df_list <- list()
for (file_iter in seq_along(microarray_files)) {
df_list[[file_iter]] <- read_in_microarray_data(microarray_files[file_iter])
}
dir.create(file.path("data", "aggregated"), recursive = TRUE)
microarray_df <- plyr::join_all(df_list, by = "Gene", type = "inner") %>%
dplyr::mutate(Gene = sub("_at", "", Gene))
# microarray data is "missing" a column name, we need to fill it in
read_in_microarray_data <- function(filename) {
# read in a given file and set the first column name to "Gene"
# we're suppressing warnings here because we know the missing column is
# a problem -- that's why we have this function!
df <- suppressWarnings(data.table::fread(filename, data.table = FALSE))
colnames(df)[1] <- "Gene"
return(df)
}
# full path to all the microarray data we obtain
microarray_files <- list.files(file.path("data", "microarray"),
full.names = TRUE)
# full path to all the microarray data we obtain
microarray_files <- list.files(file.path("data", "microarray"),
full.names = TRUE)
# initialize a list to hold the data.frames
df_list <- list()
for (file_iter in seq_along(microarray_files)) {
df_list[[file_iter]] <- read_in_microarray_data(microarray_files[file_iter])
}
df_list
dir.create(file.path("data", "aggregated"), recursive = TRUE)
microarray_df <- plyr::join_all(df_list, by = "Gene", type = "inner") %>%
dplyr::mutate(Gene = sub("_at", "", Gene))
?sample
tmp <- c("A", "B", "D", "F", "G")
sample(tmp)
sample(tmp, 2)
mcar_list <- readRDS("~/Desktop/GitRepos/compendium-processing/mcar_list.RDS")
View(mcar_list)
str(mcar_list)
